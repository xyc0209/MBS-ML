import matplotlib.pyplot as plt
import numpy as np

# 假设您有以下AUC数据
auc_data = [
    # Mega
    [0.96448547, 0.964321978, 0.928276956],
    [0.99890789,0.999845944,0.998053002],
    [0.983404058,0.5,0.58059634,0.961587588,0.5,0.53053831,0.990765067,0.5,0.727217243,],
    [0.990765067,0.5,0.657607524,0.981780781,0.5,0.663003911,0.962780924,0.5,0.590255371],
    [0.92348881, 0.991551416, 0.966014799],
    [0.994644533, 0.997850215, 0.988130668],
    [0.825501645, 0.787573964, 0.694820296],
    [0.975004691,0.994002777,0.988492188,0.905724508,0.998914604,0.99750709,0.997318021,0.832834985,0.829089096,0.829089096,0.814034796, 0.498166002],
    # Nano
    [0.921134442, 0.986517814, 0.951769775],
    [0.99312846, 0.999521735, 0.974099723],
    [0.352371787, 0.84616365, 0.87717034, 0.601349193, 0.742306502, 0.700355222, 0.475346113, 0.834452883, 0.744345629],
    [0.475346113, 0.832986437, 0.674293359, 0.462933594, 0.835122375, 0.830141806, 0.645595568, 0.743325729, 0.779868014],
    [0.821463442,0.965856979,0.789396737],
    [0.936860379, 0.988517911, 0.983373597],
    [0.562295118, 0.812608835, 0.794152047],
    [0.897587317, 0.911037906, 0.824547612, 0.908404172, 0.981224183, 0.949997357, 0.954708231, 0.83397304, 0.782779317, 0.77108341, 0.640889504, 0.818451831],
    # Bloated
    [0.917039801, 0.986069652, 0.875],
    [0.962121212, 0.999910893, 0.974194086],
    [0.98964, 0.5, 0.596669188, 0.964654113, 0.5, 0.596903409, 0.963243121, 0.5, 0.699599926],
    [0.955284749, 0.5, 0.705716583, 0.993773193, 0.5, 0.629019684, 0.982457265, 0.5, 0.680239413],
    [0.900373134, 0.985074627, 0.925],
    [0.935145296, 0.99331576, 0.994770253],
    [0.646640208, 0.662758706, 0.815909091],
    [0.965855721, 0.95308616, 0.995765755, 0.367423979, 0.882284572, 0.983964531, 0.869037375, 0.621919086, 0.996969697, 0.9997, 0.998484848, 0.933333333],
    # chatty
    [0.974222408, 0.997050241, 0.92],
    [0.997497213, 0.998413604, 0.999862969],
    [0.811655798, 0.5, 0.630952001, 0.873238095, 0.5, 0.503452381, 0.99877451, 0.5, 0.44617824],
    [0.99877451, 0.5, 0.701146747, 0.996795998, 0.5, 0.649204921, 0.917857143, 0.5, 0.662642857],
    [0.856919361, 0.995127276, 0.812],
    [0.992494426, 0.999707358, 0.999396135],
    [0.75575065, 0.816747956, 0.76],
    [0.914127587, 0.993623188, 0.945699006, 0.847103307, 0.999939614, 0.999993032, 0.996317222, 0.920248094, 0.972, 0.972, 0.972, 0.852],

    # bos
    [0.9364,0.957635468,0.957635468],
    [0.998234811,0.960738916,0.957635468,],
    [0.819573945,0.99163198,0.83961039,0.5550573,0.598977077,0.730681818,0.519659848,0.342554113,0.514685034],
    [0.993155923,0.982457265,0.963243121,0.640923466,0.623552219,0.650308858,0.5,0.5,0.5],
    [0.982758621,0.843700055,0.89037037],
    [0.983303928,0.990640394,0.988563701,],
    [0.765527705,0.724362504,0.501111111],
    [0.998034386,0.981034483,0.989225345,0.998325123,0.990344828,0.980855469,0.984849802,0.908888889,0.913333333,0.967654321,0.913333333,0.993399015],
    # SC
    [0.91172, 0.9, 0.841],
    [0.999515302,
0.994339744,
0.939003945,
],
    [0.58743164,
0.907079587,
0.987319426,
0.584647011,
0.636829837,
0.515206735,
0.516214157,
0.419648685,
0.536437266
],
    [0.975901814,
0.94976024,
0.987319426,
0.576997229,
0.636072648,
0.753649684,
0.536394515,
0.546135303,
0.41513653
],
    [0.977307412,
0.92199359,
0.794230769
],
    [0.936352814,
0.958386558,
0.915717079
],
    [0.665736181,
0.701907615,
0.754487179
],
    [0.983296809,
0.95294191,
0.970455653,
0.943589744,
0.877613412,
0.893589744,
0.954707673,
0.994699008,
0.976337392,
0.955128205,
0.862450754,
0.776981575],
    # greedy
    [0.986128959,0.897771702,0.933333333],
    [0.9989,0.99716,0.990271892],
    [0.99877451,0.796582244,0.683888889,0.935,0.61674866,0.479513361,0.512106818,0.5,0.778333333],
    [0.616666667,0.870451147,0.886958215,0.761079189,0.732781144,0.546621893,0.682961894,0.547777778,0.778333333],
    [0.965749694,0.788888889,0.849332422],
    [0.99541579,0.996563091,0.779482038],
    [0.701907615,0.823978127,0.566666667],
    [0.844444444,0.911111111,0.822222222,0.533333333,0.982498438,0.755126664,0.861054703,0.330640237,0.557685374,0.974190021,0.90287537,0.938478013]]

# Nature 学术风格的颜色
colors = ['gold', 'yellowgreen', 'lightblue', 'violet', 'pink', 'tan', 'turquoise', 'salmon']

# 设置图像布局
fig, axes = plt.subplots(4, 2, figsize=(12, 16))

# 绘制箱线图
bp = axes[0,0].boxplot(auc_data[0:8], labels=['DT', 'RF', 'ELM', 'WELM', 'KNN', 'MLP', 'MNB', 'SVM'], patch_artist=True)
for patch, color in zip(bp['boxes'], colors):
    patch.set_facecolor(color)
axes[0,0].set_ylabel('MS-AUC')
axes[0,0].set_title('(a) Performance of the Classifiers in Detecting MS')
bp1 = axes[0,1].boxplot(auc_data[8:16], labels=['DT', 'RF', 'ELM', 'WELM', 'KNN', 'MLP', 'MNB', 'SVM'], patch_artist=True)
for patch, color in zip(bp1['boxes'], colors):
    patch.set_facecolor(color)
axes[0,1].set_ylabel('NS-AUC')
axes[0,1].set_title('(b) Performance of the Classifiers in Detecting NS')
bp2 = axes[1,0].boxplot(auc_data[16:24], labels=['DT', 'RF', 'ELM', 'WELM', 'KNN', 'MLP', 'MNB', 'SVM'], patch_artist=True)
for patch, color in zip(bp2['boxes'], colors):
    patch.set_facecolor(color)
axes[1,0].set_ylabel('BS-AUC')
axes[1,0].set_title('(c) Performance of the Classifiers in Detecting BS')
bp3 = axes[1,1].boxplot(auc_data[24:32], labels=['DT', 'RF', 'ELM', 'WELM', 'KNN', 'MLP', 'MNB', 'SVM'], patch_artist=True)
for patch, color in zip(bp3['boxes'], colors):
    patch.set_facecolor(color)
axes[1,1].set_ylabel('CS-AUC')
axes[1,1].set_title('(d) Performance of the Classifiers in Detecting CS')
bp4 = axes[2,0].boxplot(auc_data[32:40], labels=['DT', 'RF', 'ELM', 'WELM', 'KNN', 'MLP', 'MNB', 'SVM'], patch_artist=True)
for patch, color in zip(bp4['boxes'], colors):
    patch.set_facecolor(color)
axes[2,0].set_ylabel('BOS-AUC')
axes[2,0].set_title('(e) Performance of the Classifiers in Detecting BOS')
bp5 = axes[2,1].boxplot(auc_data[40:48], labels=['DT', 'RF', 'ELM', 'WELM', 'KNN', 'MLP', 'MNB', 'SVM'], patch_artist=True)
for patch, color in zip(bp5['boxes'], colors):
    patch.set_facecolor(color)
axes[2,1].set_ylabel('SC-AUC')
axes[2,1].set_title('(f) Performance of the Classifiers in Detecting SC')
bp6 = axes[3,0].boxplot(auc_data[48:56], labels=['DT', 'RF', 'ELM', 'WELM', 'KNN', 'MLP', 'MNB', 'SVM'], patch_artist=True)
for patch, color in zip(bp6['boxes'], colors):
    patch.set_facecolor(color)
axes[3,0].set_ylabel('MG-AUC')
axes[3,0].set_title('(g) Performance of the Classifiers in Detecting MG')
# axes[1,1].boxplot(auc_data[9:12], patch_artist=True, boxprops=dict(color=colors[3]))
# axes[1,1].set_title('Anomaly 4')

axes[3,1].axis('off')
# 设置通用的坐标轴标签
for i in range(4):
    for j in range(2):
        axes[i,j].set_xlabel('Classifier')

# 调整布局
plt.subplots_adjust(hspace=0.5)
plt.tight_layout()
output_file = "./performances_for_MBS.jpg"
plt.savefig(output_file, format='jpeg', dpi=400)  # 设置dpi参数可以调整图像
# 显示图像
plt.show()