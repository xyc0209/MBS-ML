import matplotlib.pyplot as plt
import numpy as np

# 假设您有以下AUC数据
auc_data = [
    # Mega
    [0.95057097,0.92358156,0.999579255],
    [0.999178647,0.999579255,0.99831745],
    [0.991983958,0.501495222,0.5,0.90242175,0.693688826,0.5,0.981026374,0.569857611,0.965664303,0.5
,0.596700035],
    [0.991983958,0.5,0.647000754,0.97959296,0.5,0.705668212,0.967950046,0.5,0.707356997],
    [0.998141326, 0.972775377, 0.922167602],
    [0.996478799, 0.99175103, 0.995339971],
    [0.694414894,0.806486486,0.827041643],
    [0.999479615,0.997415417,0.997265549,0.994235742,0.994235742,0.992621528,0.989823994,0.986441413,0.973288435,0.925145907,0.893669824,0.820233709],
    # Nano
    [0.972736842,0.994366197,0.985717816],
    [0.991578947,1,0.999367433],
    [0.487823813,0.794061649,0.762124984,0.363117428,0.883006054,0.818325628,0.631375736
,0.773774112,0.681272074],
    [0.487823813,0.858393806,0.614970098,0.458190392,0.845422543,0.848299098,0.679820494,
     0.785245824,0.772579664],
    [0.956092167,0.948583835,0.830230271],
    [0.992761577,0.991311248,0.954685893],
    [0.545058068,0.840375587,0.778947368],
    [0.987621504,0.970089709,0.95639754,0.921403979,0.918528951,0.884111335,0.837660076,0.812749832,0.770071429,0.721190476,0.682714286,0.619142857],
    # Bloated
    [0.892307692,0.985909091,0.916678322],
    [0.961538462,0.999859504,0.976326276,],
    [0.95610031,0.5,0.615284715,0.989027924,0.5,0.59204497,0.955284749,0.5,0.675125326],
    [0.954836189,0.5,0.574542125,0.99326299,0.5,0.748815752,0.955284749,0.5,0.705716583],
    [0.985972851,0.930769231,0.907692308],
    [0.994324143,0.993791338,0.934668861],
    [0.808816679,0.675726443,0.636046875],
    [1,0.998717949,0.997435897,0.99540012,0.994479154,0.990993204,0.968895674,0.958602453,0.957751554,0.953846154,0.515898937,0.372791296],
    # chatty
    [1,1,0.933333333],
    [1,1,1],
    [0.946410773,0.5,0.644352692,0.761904762,0.5,0.5,1,0.5,0.703291973],
    [1,0.5,0.785926419,0.999920228,0.5,0.756355747,1,0.5,0.753968254],
    [0.999456522,0.999130435,0.966666667],
    [0.999936006,0.997248886,0.998826357],
    [0.856270489,0.885004747,0.85],
    [1,1,1,1,1,1,0.999660717,0.997826087,0.996956522,0.996825397,0.995146182,0.988066105],

    # bos
    [1,1,0.983333333,],
    [0.997829457,1,0.989506173],
    [0.698985593,0.513582854,0.544172722,0.925793021,0.380988746,0.677152143,0.99174591,0.506512085,0.594344457],
    [0.992639745,0.5,0.668909055,0.955284749,0.5,0.68532202,0.954836189,0.5,0.598496055],
    [0.988861689,0.982790698,0.926738142],
    [0.990632774,0.990009735,0.94044984],
    [0.474683894,0.741577918,0.638888889],
    [1,0.99877601,0.998765432,0.996153597,0.99378213,0.988832883,0.978301785,0.976023392,0.96280052,0.957160343,0.957160343,0.93186371],
    # SC
    [1,1,0.941666667],
    [0.997962154,1,1],
    [0.47892394,0.47892394,0.590581375,0.801587302,0.5,0.353174603,0.984448604,0.475620801,0.466478327],
    [0.984448604,0.470836078,0.66506905,0.986127498,0.478682303,0.638411948,0.833333333,0.5,0.492063492],
    [0.994347826,0.74442029,0.6],
    [0.994714621,0.994639285,0.873071325],
    [0.748129865,0.754710461,0.775],
    [1,0.996916047,0.988115942,0.983933289,0.98377188,0.968413326,0.827777778,0.817068749,0.794444444,0.761111111,0.605499718,0.444444444],
    # greedy
    [0.831449275,0.997391304,1],
    [0.999130435,1,1],
    [0.947823641,0.5,0.693735309,0.875,0.11875,0.875,1,0.677255623,0.303249679],
    [0.863603849,0.589510478,0.541666687,0.90408577,0.636147892,0.679190738,1,0.11875,0.8875],
    [0.987871259,0.893913043,0.777777778],
    [0.995603596,0.997850669,0.838096493],
    [0.748129865,0.893913043,0.8],
    [0.990282872,0.983490369,0.926406926,0.918903319,0.904516684,0.9,0.9,0.9,0.9,0.893424933,0.610408074,0.080124224]]

# Nature 学术风格的颜色
colors = ['gold', 'yellowgreen', 'lightblue', 'violet', 'pink', 'tan', 'turquoise', 'salmon']

# 设置图像布局
fig, axes = plt.subplots(4, 2, figsize=(12, 16))

# 绘制箱线图
bp = axes[0,0].boxplot(auc_data[0:8], labels=['DT', 'RF', 'ELM', 'WELM', 'KNN', 'MLP', 'MNB', 'SVM'], patch_artist=True)
for patch, color in zip(bp['boxes'], colors):
    patch.set_facecolor(color)
axes[0,0].set_ylabel('MS-AUC')
axes[0,0].set_title('(a) Performance of the Classifiers in Detecting MS')
bp1 = axes[0,1].boxplot(auc_data[8:16], labels=['DT', 'RF', 'ELM', 'WELM', 'KNN', 'MLP', 'MNB', 'SVM'], patch_artist=True)
for patch, color in zip(bp1['boxes'], colors):
    patch.set_facecolor(color)
axes[0,1].set_ylabel('NS-AUC')
axes[0,1].set_title('(b) Performance of the Classifiers in Detecting NS')
bp2 = axes[1,0].boxplot(auc_data[16:24], labels=['DT', 'RF', 'ELM', 'WELM', 'KNN', 'MLP', 'MNB', 'SVM'], patch_artist=True)
for patch, color in zip(bp2['boxes'], colors):
    patch.set_facecolor(color)
axes[1,0].set_ylabel('BS-AUC')
axes[1,0].set_title('(c) Performance of the Classifiers in Detecting BS')
bp3 = axes[1,1].boxplot(auc_data[24:32], labels=['DT', 'RF', 'ELM', 'WELM', 'KNN', 'MLP', 'MNB', 'SVM'], patch_artist=True)
for patch, color in zip(bp3['boxes'], colors):
    patch.set_facecolor(color)
axes[1,1].set_ylabel('CS-AUC')
axes[1,1].set_title('(d) Performance of the Classifiers in Detecting CS')
bp4 = axes[2,0].boxplot(auc_data[32:40], labels=['DT', 'RF', 'ELM', 'WELM', 'KNN', 'MLP', 'MNB', 'SVM'], patch_artist=True)
for patch, color in zip(bp4['boxes'], colors):
    patch.set_facecolor(color)
axes[2,0].set_ylabel('BOS-AUC')
axes[2,0].set_title('(e) Performance of the Classifiers in Detecting BOS')
bp5 = axes[2,1].boxplot(auc_data[40:48], labels=['DT', 'RF', 'ELM', 'WELM', 'KNN', 'MLP', 'MNB', 'SVM'], patch_artist=True)
for patch, color in zip(bp5['boxes'], colors):
    patch.set_facecolor(color)
axes[2,1].set_ylabel('SC-AUC')
axes[2,1].set_title('(f) Performance of the Classifiers in Detecting SC')
bp6 = axes[3,0].boxplot(auc_data[48:56], labels=['DT', 'RF', 'ELM', 'WELM', 'KNN', 'MLP', 'MNB', 'SVM'], patch_artist=True)
for patch, color in zip(bp6['boxes'], colors):
    patch.set_facecolor(color)
axes[3,0].set_ylabel('MG-AUC')
axes[3,0].set_title('(g) Performance of the Classifiers in Detecting MG')
# axes[1,1].boxplot(auc_data[9:12], patch_artist=True, boxprops=dict(color=colors[3]))
# axes[1,1].set_title('Anomaly 4')

axes[3,1].axis('off')
# 设置通用的坐标轴标签
for i in range(4):
    for j in range(2):
        axes[i,j].set_xlabel('Classifier')

# 调整布局
plt.subplots_adjust(hspace=0.5)
plt.tight_layout()
output_file = "./performances_for_MBS.jpg"
plt.savefig(output_file, format='jpeg', dpi=400)  # 设置dpi参数可以调整图像
# 显示图像
plt.show()